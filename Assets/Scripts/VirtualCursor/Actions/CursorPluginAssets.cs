//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Resources/InputActions/CursorPluginAssets.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CursorPluginAssets: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CursorPluginAssets()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CursorPluginAssets"",
    ""maps"": [
        {
            ""name"": ""VirtualCursor"",
            ""id"": ""1ade2e7f-e4ad-4318-a2a6-d28bee2930c0"",
            ""actions"": [
                {
                    ""name"": ""MainKey"",
                    ""type"": ""Button"",
                    ""id"": ""9cd508fa-7663-4c89-a4d5-782498f2eb9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CrossDir"",
                    ""type"": ""Value"",
                    ""id"": ""d3400d48-0a89-47cf-a244-6a6013248b7c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0dbc2ec8-d048-41f1-8ede-fd8bcb747ee1"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MainKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d07284f-0b96-41ea-9184-566edf2da65c"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayStation"",
                    ""action"": ""MainKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""652ef7fd-7331-481f-8c8c-b18a75503b47"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CrossDir"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f16066ac-6421-45db-96ed-f438fb5761f9"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""CrossDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""13181362-3416-4f9a-8790-530b87a5289d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""CrossDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""805c6002-0158-4400-862c-bd698f4d76aa"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""CrossDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""431bcd9b-6d93-416e-88e7-9c996413d62a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""CrossDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""06969035-28ea-4490-8a63-c74db9441b7c"",
                    ""path"": ""<DualShockGamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayStation"",
                    ""action"": ""CrossDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""PlayStation"",
            ""bindingGroup"": ""PlayStation"",
            ""devices"": [
                {
                    ""devicePath"": ""<DualShockGamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mobile"",
            ""bindingGroup"": ""Mobile"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // VirtualCursor
        m_VirtualCursor = asset.FindActionMap("VirtualCursor", throwIfNotFound: true);
        m_VirtualCursor_MainKey = m_VirtualCursor.FindAction("MainKey", throwIfNotFound: true);
        m_VirtualCursor_CrossDir = m_VirtualCursor.FindAction("CrossDir", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // VirtualCursor
    private readonly InputActionMap m_VirtualCursor;
    private List<IVirtualCursorActions> m_VirtualCursorActionsCallbackInterfaces = new List<IVirtualCursorActions>();
    private readonly InputAction m_VirtualCursor_MainKey;
    private readonly InputAction m_VirtualCursor_CrossDir;
    public struct VirtualCursorActions
    {
        private @CursorPluginAssets m_Wrapper;
        public VirtualCursorActions(@CursorPluginAssets wrapper) { m_Wrapper = wrapper; }
        public InputAction @MainKey => m_Wrapper.m_VirtualCursor_MainKey;
        public InputAction @CrossDir => m_Wrapper.m_VirtualCursor_CrossDir;
        public InputActionMap Get() { return m_Wrapper.m_VirtualCursor; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VirtualCursorActions set) { return set.Get(); }
        public void AddCallbacks(IVirtualCursorActions instance)
        {
            if (instance == null || m_Wrapper.m_VirtualCursorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VirtualCursorActionsCallbackInterfaces.Add(instance);
            @MainKey.started += instance.OnMainKey;
            @MainKey.performed += instance.OnMainKey;
            @MainKey.canceled += instance.OnMainKey;
            @CrossDir.started += instance.OnCrossDir;
            @CrossDir.performed += instance.OnCrossDir;
            @CrossDir.canceled += instance.OnCrossDir;
        }

        private void UnregisterCallbacks(IVirtualCursorActions instance)
        {
            @MainKey.started -= instance.OnMainKey;
            @MainKey.performed -= instance.OnMainKey;
            @MainKey.canceled -= instance.OnMainKey;
            @CrossDir.started -= instance.OnCrossDir;
            @CrossDir.performed -= instance.OnCrossDir;
            @CrossDir.canceled -= instance.OnCrossDir;
        }

        public void RemoveCallbacks(IVirtualCursorActions instance)
        {
            if (m_Wrapper.m_VirtualCursorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVirtualCursorActions instance)
        {
            foreach (var item in m_Wrapper.m_VirtualCursorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VirtualCursorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VirtualCursorActions @VirtualCursor => new VirtualCursorActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    private int m_PlayStationSchemeIndex = -1;
    public InputControlScheme PlayStationScheme
    {
        get
        {
            if (m_PlayStationSchemeIndex == -1) m_PlayStationSchemeIndex = asset.FindControlSchemeIndex("PlayStation");
            return asset.controlSchemes[m_PlayStationSchemeIndex];
        }
    }
    private int m_MobileSchemeIndex = -1;
    public InputControlScheme MobileScheme
    {
        get
        {
            if (m_MobileSchemeIndex == -1) m_MobileSchemeIndex = asset.FindControlSchemeIndex("Mobile");
            return asset.controlSchemes[m_MobileSchemeIndex];
        }
    }
    public interface IVirtualCursorActions
    {
        void OnMainKey(InputAction.CallbackContext context);
        void OnCrossDir(InputAction.CallbackContext context);
    }
}
